#+ STARTUP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
  ;no startup message
  (setq inhibit-startup-message t)

  ;no toolbar
  (tool-bar-mode -1)

  ; make ibuffer default
  (defalias 'list-buffers 'ibuffer)

  (fset 'yes-or-no-p 'y-or-n-p);y-or-n
  (global-set-key (kbd "<f5>") 'revert-buffer);f5 to revert buffer

  ;; removes *messages* from the buffer
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")

  ;; turn on line and column numbers
  (line-number-mode t)
  (column-number-mode t)
  (global-display-line-numbers-mode) 
  
  ;; allow upcase (C-x C-u) and downcase (C-x C-l) region
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)

  ;; KEY BINDINGS/MODIFICATIONS

  ;; jump to other frame (split screen)
  (global-set-key [C-tab] 'other-frame)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which Key
  Brings up some help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* Org mode
  Org Bullets That makes things look pretty
#+BEGIN_SRC emacs-lisp 
;  (use-package org-bullets
 ;   :ensure t
  ;  :config
   ; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Ace windows for easy switching 
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
  '(aw-leading-char-face
  ((t (:inherit ace-jump-face-foreground :height 3.0)))))
   ))
#+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular
  expressions and Ivy / Counsel replace a lot of ido or helms
  completion functionality
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

* Avy
  Navigate by searching for a letter on the screen and jumping to it
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
    ;; :init
    ;; (progn
    ;;   (ac-config-default)
    ;;   (global-auto-complete-mode t)
    ;;   ))
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
#+END_SRC

* Revel.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
* PDF tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
  (use-package org-pdfview
    :ensure t)

  (require 'pdf-tools)
  (require 'org-pdfview)
#+END_SRC
